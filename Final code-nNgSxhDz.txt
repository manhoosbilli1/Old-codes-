#include <EEPROM.h>
#include <LiquidCrystal_I2C.h>
#include <TimeLib.h>
#include <TimeAlarms.h>
#include "RTClib.h"
#include <JC_Button.h>
#include "DHT.h"
#define DHTPIN 2    // what pin we're connected to
#define DHTTYPE DHT22   // DHT 22  (AM2302)
#define btn_up 12
#define btn_down  11
#define btn_select 11
#define lSw1 8 //l.sw2
#define lSw2 9 // l.sw1
#define m1 5
#define m2 6
#define relay 3
#define buzzer A1
#define deHumFan A3

bool showHatchDay = 0;
bool needToShowTime = 0;
bool updAlarm;
bool turnOnce = false;
float h;
float t;
int currentPage = 0;
bool startMotor = false;
unsigned long previousMillis = 0;
unsigned int tDuration = 5000;
unsigned int hatchYear;
unsigned int hatchMonth;
unsigned int hatchDay;
unsigned int hatchHour;
unsigned int hour_now;
unsigned int minute_now;
unsigned int second_now;
unsigned int month_now;
unsigned int year_now;
unsigned int day_now;

RTC_DS3231 rtc;
DHT dht(DHTPIN, DHTTYPE);
LiquidCrystal_I2C lcd(0x27, 16, 2);
AlarmId id;
Button Up(btn_up);
Button Select(btn_select);
Button Down(btn_down);
Button ls1(lSw1);
Button ls2(lSw2);

void setup() {
  // put your setup code here, to run once:
  Alarm.timerRepeat(20, turnEggFlag);  //every 10 seconds
  DateTime now = rtc.now();
  Up.begin();
  Down.begin();
  Select.begin();
  ls1.begin();
  ls2.begin();
  Serial.begin(9600);
  lcd.begin();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("   Incubator   ");
  lcd.setCursor(0, 1);
  lcd.print("   Starting   ");
  EEPROM.get(0, hatchYear);
  EEPROM.get(4, hatchMonth);
  EEPROM.get(8, hatchDay);
  hour_now = now.hour();
  minute_now = now.minute();
  second_now = now.second();
  month_now = now.month();
  year_now = now.year();
  day_now = now.day();

  setTime(hour_now, minute_now, second_now, month_now, day_now, year_now);

  if (! rtc.begin()) {
    Serial.println("Couldn't find RTC");
    while (1);
  }
  if (rtc.lostPower()) {
    Serial.println("RTC lost power");
    // following line sets the RTC to the date & time this sketch was compiled
    //rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    // This line sets the RTC with an explicit date & time, for example to set
    // January 21, 2014 at 3am you would call:
    // rtc.adjust(DateTime(2014, 1, 21, 3, 0, 0));
  }
  pinMode(m1, OUTPUT);
  pinMode(m2, OUTPUT);
  lcd.setCursor(0,0);
  lcd.print("Mtr Calibrating     ");
  while (ls1.read() == LOW && ls2.read() == LOW) {
    digitalWrite(m1, HIGH);
    digitalWrite(m2, LOW);
  }
  lcd.print("Mtr calibrated");
  digitalWrite(m1, LOW);
  digitalWrite(m2, LOW);
  Alarm.delay(2000);
}

enum states {
  STATE_IDLE,
  STATE_MOVING_RIGHT,
  STATE_MOVING_LEFT
};
int currentState = STATE_IDLE;

void loop() {

  Up.read();
  Down.read();
  Select.read();
  ls1.read();
  ls2.read();
  DateTime now = rtc.now();
  menu();
  turn();

}

void turnEggFlag() {
  Serial.println("Turned on the flag");
  startMotor = true;
}

void turn_once() {
  bool turnOnce = true;
  switch (currentState) {
    case STATE_IDLE:
      if (ls1.read() == false && ls2.read() == true) {
        Serial.println("Moving right now");
        digitalWrite(m1, HIGH);
        digitalWrite(m2, LOW);
        currentState = STATE_MOVING_RIGHT;
      }
      if (ls1.read() == true && ls2.read() == false) {
        Serial.println("Moving left now");
        digitalWrite(m1, LOW);
        digitalWrite(m2, HIGH);
        currentState = STATE_MOVING_LEFT;
      }
      break;


    case STATE_MOVING_RIGHT:
      if (ls1.read() == true && ls2.read() == false) {
        Serial.println("Motor reached right. Motor stopping");
        digitalWrite(m1, LOW);
        digitalWrite(m2, LOW);
        turnOnce = false;
        currentState = STATE_IDLE;
        break;
      }
      break;

    case STATE_MOVING_LEFT:
      if (ls1.read() == false && ls2.read() == true) {
        Serial.println("Motor has reached left. Motor stopping");
        digitalWrite(m1, LOW);
        digitalWrite(m2, LOW);
        turnOnce = false;
        currentState = STATE_IDLE;
        break;
      }
      break;
  }
}


void turn() {
  if (startMotor) {
    switch (currentState) {
      case STATE_IDLE:
        if (ls1.read() == false && ls2.read() == true) {
          Serial.println("Moving right now");
          digitalWrite(m1, HIGH);
          digitalWrite(m2, LOW);
          currentState = STATE_MOVING_RIGHT;
        }
        if (ls1.read() == true && ls2.read() == false) {
          Serial.println("Moving left now");
          digitalWrite(m1, LOW);
          digitalWrite(m2, HIGH);
          currentState = STATE_MOVING_LEFT;
        }
        break;


      case STATE_MOVING_RIGHT:
        if (ls1.read() == true && ls2.read() == false) {
          Serial.println("Motor reached right. Motor stopping");
          digitalWrite(m1, LOW);
          digitalWrite(m2, LOW);
          startMotor = false;
          currentState = STATE_IDLE;
          break;
        }
        break;

      case STATE_MOVING_LEFT:
        if (ls1.read() == false && ls2.read() == true) {
          Serial.println("Motor has reached left. Motor stopping");
          digitalWrite(m1, LOW);
          digitalWrite(m2, LOW);
          startMotor = false;
          currentState = STATE_IDLE;
          break;
        }
        break;
    }
  }
}

void menu() {
  switch (currentPage) {
    default:
      Serial.println("in default");
      break;

    case 0:
      //show status day remaining for hatch
      //show time remaining for next turn
      lcd.setCursor(0, 0);
      lcd.print("T: ");
      lcd.print("38 C        ");
      lcd.setCursor(0, 1);
      lcd.print("H: ");
      lcd.print("56%         ");

      //show humidity from sensor
      if (Up.wasPressed()) {
        currentPage += 1;
      }
      if (Down.wasPressed()) {
        currentPage = 5;
      }
      break;

    case 1:
      lcd.setCursor(0, 0);
      lcd.print("Press Select To         ");
      lcd.setCursor(0, 1);
      lcd.print("Find HatchDay         ");
      if (Up.wasPressed()) {
        currentPage += 1;
      }
      if (Down.wasPressed()) {
        currentPage -= 1;
      }

      if (Select.wasPressed()) {
        DateTime now = rtc.now();
        DateTime future (now.unixtime() + 21 * 86400L + 30);
        hatchYear = future.year();
        hatchMonth = future.month();
        hatchDay = future.day();
        hatchHour = future.hour();
        EEPROM.update(0, hatchYear);
        EEPROM.update(4, hatchMonth);
        EEPROM.update(8, hatchDay);
        showHatchDay = true;
        if (showHatchDay) {
          previousMillis = millis();
          while ((millis() - previousMillis) <= 3000) {
            lcd.setCursor(0, 0);
            lcd.print("   Hatch Day   ");
            lcd.setCursor(0, 1);
            lcd.print("   ");
            lcd.print(future.year(), DEC);
            lcd.print("/");
            lcd.print(future.month(), DEC);
            lcd.print("/");
            lcd.print(future.day(), DEC);
            lcd.print("       ");
            delay(50);
          }
          showHatchDay = false;
        }
      }

      break;

    case 2:
      lcd.setCursor(0, 0);
      lcd.print("Press Select          ");
      lcd.setCursor(0, 1);
      lcd.print("To Turn Motor     ");
      if (Up.wasPressed()) {
        currentPage += 1;
      }
      if (Down.wasPressed()) {
        currentPage -= 1;
      }

      if (Select.wasPressed()) {
        turnOnce = true;
        if (turnOnce) {   //variable is true
          turn_once();  // go to turn once function
        }
      }
      break;

    case 3:
      lcd.setCursor(0, 0);
      lcd.print("Press Select       ");
      lcd.setCursor(0, 1);
      lcd.print("To Run Demo               ");
      if (Up.wasPressed()) {
        currentPage += 1;
      }
      if (Down.wasPressed()) {
        currentPage -= 1;
      }
      if (Select.wasPressed()) {
        turnOnce = true;
        if (turnOnce) {   //variable is true
          turn_once();  // go to turn once function
        }
        digitalWrite(buzzer, HIGH);
        Alarm.delay(1000);
        digitalWrite(buzzer, LOW);
        digitalWrite(deHumFan, HIGH);
        digitalWrite(relay, HIGH);
        Alarm.delay(1000);
        digitalWrite(relay, LOW);
        digitalWrite(deHumFan, LOW);
      }
      break;

    case 4:
      lcd.setCursor(0, 0);
      lcd.print("Press Select          ");
      lcd.setCursor(0, 1);
      lcd.print("To Check Fan        ");
      if (Up.wasPressed()) {
        currentPage += 1;
      }
      if (Down.wasPressed()) {
        currentPage -= 1;
      }
      if (Select.wasPressed()) {
        digitalWrite(deHumFan, HIGH);
        delay(3000);
        digitalWrite(deHumFan, LOW);
      }
  break;


case 5:
  lcd.setCursor(0, 0);
  lcd.print("Press Select         ");
  lcd.setCursor(0, 1);
  lcd.print("To Show Time         ");
  if (Up.wasPressed()) {
    currentPage = 0;
  }
  if (Down.wasPressed()) {
    currentPage -= 1;
  }
  if (Select.wasPressed()) {
    needToShowTime = true;
    if ( needToShowTime ) {   //triggers a function which will print to lcd
      previousMillis = millis();   //and wait for said time
      while ((millis() - previousMillis) <= tDuration) //show for 5 seconds
      {
        showTime();
        delay(50);       //to slow down arduino
      }
      needToShowTime = false;  //after we have shown the time for time we can go to normal
    }
  }
  break;

}
}



void showTime()
{

  DateTime now = rtc.now();
  lcd.setCursor(0, 0);
  lcd.print("Date:  ");
  lcd.setCursor(7, 0);
  lcd.print(now.year(), DEC);
  lcd.print('/');
  lcd.print(now.month(), DEC);
  lcd.print('/');
  lcd.print(now.day(), DEC);
  lcd.print("            ");
  lcd.setCursor(0, 1);
  lcd.print("Time:  ");
  lcd.setCursor(7, 1);
  lcd.print("");
  lcd.print(now.hour(), DEC);
  lcd.print(':');
  lcd.print(now.minute(), DEC);
  lcd.print(':');
  lcd.print(now.second(), DEC);
  lcd.print("          ");

}

void printTime() {
  if ( needToShowTime ) {    //triggers a function which will print to lcd
    previousMillis = millis();   //and wait for said time
    while ((millis() - previousMillis) <= tDuration) //show for 5 seconds
    {
      showTime();
      delay(50);       //to slow down arduino
    }
    needToShowTime = false;  //after we have shown the time for time we can go to normal
  }
}